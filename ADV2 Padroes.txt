import java.util.Arrays;

// Classe abstrata Veículo
abstract class Veiculo implements Cloneable {
    private String modelo;
    private String marca;
    private String cor;
    private int numeroRodas;

    // Construtor
    public Veiculo(String modelo, String marca, String cor, int numeroRodas) {
        this.modelo = modelo;
        this.marca = marca;
        this.cor = cor;
        this.numeroRodas = numeroRodas;
    }

    // Método clone abstrato
    public abstract Veiculo clone();

    // Método represent abstrato
    public abstract String represent();

    // Getters e setters
    public String getModelo() {
        return modelo;
    }

    public String getMarca() {
        return marca;
    }

    public String getCor() {
        return cor;
    }

    public int getNumeroRodas() {
        return numeroRodas;
    }
}

// Subclasse Carro
class Carro extends Veiculo {
    private int numeroPortas;

    // Construtor
    public Carro(String modelo, String marca, String cor, int numeroRodas, int numeroPortas) {
        super(modelo, marca, cor, numeroRodas);
        this.numeroPortas = numeroPortas;
    }

    // Método clone
    @Override
    public Carro clone() {
        return new Carro(getModelo(), getMarca(), getCor(), getNumeroRodas(), numeroPortas);
    }

    // Método represent
    @Override
    public String represent() {
        return "Carro: Modelo=" + getModelo() + ", Marca=" + getMarca() + ", Cor=" + getCor() +
                ", Número de Rodas=" + getNumeroRodas() + ", Número de Portas=" + numeroPortas;
    }
}

// Subclasse Moto
class Moto extends Veiculo {
    private boolean temCarenagem;

    // Construtor
    public Moto(String modelo, String marca, String cor, int numeroRodas, boolean temCarenagem) {
        super(modelo, marca, cor, numeroRodas);
        this.temCarenagem = temCarenagem;
    }

    // Método clone
    @Override
    public Moto clone() {
        return new Moto(getModelo(), getMarca(), getCor(), getNumeroRodas(), temCarenagem);
    }

    // Método represent
    @Override
    public String represent() {
        return "Moto: Modelo=" + getModelo() + ", Marca=" + getMarca() + ", Cor=" + getCor() +
                ", Número de Rodas=" + getNumeroRodas() + ", Tem Carenagem=" + temCarenagem;
    }
}

// Classe Aplicação
public class Aplicacao {
    public static void main(String[] args) {
        // Criação de um array com seis veículos
        Veiculo[] veiculos = new Veiculo[6];
        veiculos[0] = new Carro("Fiesta", "Ford", "Azul", 4, 4);
        veiculos[1] = new Moto("CG 125", "Honda", "Preto", 2, false);
        veiculos[2] = veiculos[0].clone();
        veiculos[3] = veiculos[1].clone();
        veiculos[4] = veiculos[0].clone();
        veiculos[5] = veiculos[1].clone();

        // Método que retorna um array com clones dos veículos
        Veiculo[] clones = cloneVeiculos(veiculos);

        // Imprime a representação de cada clone de veículo
        for (Veiculo veiculo : clones) {
            System.out.println(veiculo.represent());
        }
    }

    // Método que retorna um array com clones dos veículos
    public static Veiculo[] cloneVeiculos(Veiculo[] veiculos) {
        Veiculo[] clones = new Veiculo[veiculos.length];
        for (int i = 0; i < veiculos.length; i++) {
            clones[i] = veiculos[i].clone();
        }
        return clones;
    }
}